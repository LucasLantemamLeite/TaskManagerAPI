// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Context;

#nullable disable

namespace TaskManagerAPI.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20250319191733_ColumnAcessLevel")]
    partial class ColumnAcessLevel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Models.TaskItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("TaskId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CompletionDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CreatedOn");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("DeadLine");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)")
                        .HasColumnName("Description");

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("Done");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Title");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskItems", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValue(1)
                        .HasColumnName("AcessLevel");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(true)
                        .HasColumnName("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("SMALLDATETIME")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Unique_UserAccount_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "Unique_UserAccount_Login")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "Unique_UserAccount_PhoneNumber")
                        .IsUnique();

                    b.ToTable("UserAccounts", (string)null);
                });

            modelBuilder.Entity("TaskManager.Models.TaskItem", b =>
                {
                    b.HasOne("TaskManager.Models.UserAccount", "UserAccount")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("TaskManager.Models.UserAccount", b =>
                {
                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
